"""
This type stub file was generated by pyright.
"""

import numpy as np
from pathlib import Path
from typing import Any, Dict, Optional, TYPE_CHECKING, Union
from PIL import Image
from numpy._typing import NDArray, _8Bit

from picamera2.picamera2 import Picamera2 as Picamera2

if TYPE_CHECKING:
    ...
_log = ...
class _MappedBuffer:
    def __init__(self, request: CompletedRequest, stream: str, write: bool = ...) -> None:
        ...
    
    def __enter__(self) -> Any:
        ...
    
    def __exit__(self, exc_type: Any, exc_value: Any, exc_traceback: Any) -> None:
        ...
    


class MappedArray:
    def __init__(self, request: CompletedRequest, stream: str, reshape: bool = ..., write: bool = ...) -> None:
        ...
    
    def __enter__(self) -> MappedArray:
        ...
    
    def __exit__(self, exc_type: Any, exc_value: Any, exc_traceback: Any) -> None:
        ...
    
    @property
    def array(self) -> Optional[np.ndarray]:
        ...
    


class CompletedRequest:
    FASTER_JPEG = ...
    def __init__(self, request: Any, picam2: Picamera2) -> None:
        ...
    
    def acquire(self) -> None:
        """Acquire a reference to this completed request, which stops it being recycled back to the camera system."""
        ...
    
    def release(self) -> None:
        """Release this completed frame back to the camera system (once its reference count reaches zero)."""
        ...
    
    def make_buffer(self, name: str) -> np.ndarray:
        """Make a 1D numpy array from the named stream's buffer."""
        ...
    
    def get_metadata(self) -> Dict[str, Any]:
        """Fetch the metadata corresponding to this completed request."""
        ...
    
    def make_array(self, name: str) -> np.ndarray:
        """Make a 2d numpy array from the named stream's buffer."""
        ...
    
    def make_image(self, name: str, width: Optional[int] = ..., height: Optional[int] = ...) -> Image.Image:
        """Make a PIL image from the named stream's buffer."""
        ...
    
    def save(self, name: str, file_output: Any, format: Optional[str] = ..., exif_data: Optional[Dict[str, Any]] = ...) -> None:
        """
        Save a JPEG or PNG image of the named stream's buffer.

        exif_data - dictionary containing user defined exif data (based on `piexif`). This will
            overwrite existing exif information generated by picamera2.
        """
        ...
    
    def save_dng(self, file_output: Any, name: str = ...) -> None:
        """Save a DNG RAW image of the raw stream's buffer."""
        ...
    


class Helpers:
    """This class implements functionality required by the CompletedRequest methods.

    In such a way that it can be usefully accessed even without a CompletedRequest object.
    """
    def __init__(self, picam2: Picamera2) -> None:
        ...
    
    def make_array(self, buffer, config) -> NDArray[Any]:
        """Makes a 2d numpy array for the named stream's buffer.

        This method makes a copy of the underlying camera buffer, so that it can be
        safely returned to the camera system.
        """
        ...
    
    def make_image(self, buffer: np.ndarray, config: Dict[str, Any], width: Optional[int] = ..., height: Optional[int] = ...) -> Image.Image:
        """Make a PIL image from the named stream's buffer."""
        ...
    
    def save(self, img: Image.Image, metadata: Dict[str, Any], file_output: Union[str, Path], format: Optional[str] = ..., exif_data: Optional[Dict] = ...) -> None:
        """Save a JPEG or PNG image of the named stream's buffer.

        exif_data - dictionary containing user defined exif data (based on `piexif`). This will
            overwrite existing exif information generated by picamera2.
        """
        ...
    
    def save_dng(self, buffer: np.ndarray, metadata: Dict[str, Any], config: Dict[str, Any], file_output: Any) -> None:
        """Save a DNG RAW image of the raw stream's buffer."""
        ...
    
    def decompress(self, array: np.ndarray) -> NDArray[np.unsignedinteger[_8Bit]]:
        """Decompress an image buffer that has been compressed with a PiSP compression format."""
        ...
    


