"""
This type stub file was generated by pyright.
"""
from concurrent.futures import Future
from typing import Any, Self


class Hailo:
    TARGET = ...
    TARGET_REF_COUNT = ...
    def __init__(self, hef_path, batch_size=..., output_type=...) -> None:
        """
        Initialize the HailoAsyncInference class with the provided HEF model file path.

        Args:
            hef_path (str): Path to the HEF model file.
            batch_size (int): Batch size for inference.
            output_type (str): Format type of the output stream.
        """
        ...
    
    def __enter__(self) -> Self:
        """Used for allowing use with context manager."""
        ...
    
    def __exit__(self, exc_type, exc_val, exc_traceback) -> None:
        """Used for allowing use with context manager."""
        ...
    
    def callback(self, completion_info, bindings, future, last) -> None:
        """
        Callback function for handling inference results.

        Args:
            completion_info: Information about the completion of the inference task.
            bindings: Bindings object containing input and output buffers.
        """
        ...
    
    def get_input_shape(self):
        """
        Get the shape of the model's input layer.

        Returns:
            tuple: Shape of the model's input layer.
        """
        ...
    
    def describe(self) -> tuple[list[tuple[Any, Any, Any]], list[tuple[Any, Any, Any]]]:
        """
        Return information that describes what's in the model.

        Returns:
            A pair of lists containing, respectively, information about the input and output layers.
        """
        ...
    
    def run_async(self, input_data) -> Future[Any]:
        """
        Run asynchronous inference on the Hailo-8 device.

        Args:
            input_data (np.ndarray): Input data for inference.

        Returns:
            future: Future to wait on for the inference results.
        """
        ...
    
    def run(self, input_data):
        """
        Run asynchronous inference on the Hailo-8 device.

        Args:
            input_data (np.ndarray): Input data for inference.

        Returns:
            inference output or list: Inference output or List of inference outputs if batch_size is not None.
        """
        ...
    
    def close(self) -> None:
        """Release the Hailo device."""
        ...
    


