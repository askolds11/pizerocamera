"""
This type stub file was generated by pyright.
"""

import ctypes
import numpy as np
from typing import List, Optional

from numpy._typing import _8Bit, NDArray

from picamera2 import CompletedRequest as CompletedRequest, Picamera2 as Picamera2

NETWORK_NAME_LEN = ...
MAX_NUM_TENSORS = ...
MAX_NUM_DIMENSIONS = ...
FW_LOADER_STAGE = ...
FW_MAIN_STAGE = ...
FW_NETWORK_STAGE = ...
GET_DEVICE_ID_CTRL_ID = ...
NETWORK_FW_FD_CTRL_ID = ...
ROI_CTRL_ID = ...
class OutputTensorInfo(ctypes.LittleEndianStructure):
    _fields_ = ...


class CnnOutputTensorInfoExported(ctypes.LittleEndianStructure):
    _fields_ = ...


class NetworkIntrinsics:
    def __init__(self, val=...) -> None:
        ...
    
    @property
    def intrinsics(self) -> Optional[dict]:
        ...
    
    @intrinsics.setter
    def intrinsics(self, val) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def update_with_defaults(self) -> None:
        ...
    
    @property
    def task(self) -> Optional[str]:
        ...
    
    @task.setter
    def task(self, val: str) -> None:
        ...
    
    @property
    def inference_rate(self) -> Optional[float]:
        ...
    
    @inference_rate.setter
    def inference_rate(self, val: float) -> None:
        ...
    
    @property
    def fps(self) -> Optional[float]:
        ...
    
    @fps.setter
    def fps(self, val: Optional[float]) -> None:
        ...
    
    @property
    def bbox_normalization(self) -> Optional[bool]:
        ...
    
    @bbox_normalization.setter
    def bbox_normalization(self, val: Optional[bool]) -> None:
        ...
    
    @property
    def bbox_order(self) -> Optional[str]:
        ...
    
    @bbox_order.setter
    def bbox_order(self, val: str) -> None:
        ...
    
    @property
    def softmax(self) -> Optional[bool]:
        ...
    
    @softmax.setter
    def softmax(self, val: Optional[bool]) -> None:
        ...
    
    @property
    def postprocess(self) -> Optional[str]:
        ...
    
    @postprocess.setter
    def postprocess(self, val: str) -> None:
        ...
    
    @property
    def preserve_aspect_ratio(self) -> Optional[bool]:
        ...
    
    @preserve_aspect_ratio.setter
    def preserve_aspect_ratio(self, val: Optional[bool]) -> None:
        ...
    
    @property
    def labels(self) -> Optional[List[str]]:
        ...
    
    @labels.setter
    def labels(self, val: List[str]) -> None:
        ...
    
    @property
    def ignore_dash_labels(self) -> Optional[bool]:
        ...
    
    @ignore_dash_labels.setter
    def ignore_dash_labels(self, val: Optional[bool]) -> None:
        ...
    


class IMX500:
    def __init__(self, network_file: str, camera_id: str = ...) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    @property
    def camera_num(self) -> int:
        ...
    
    @property
    def config(self) -> dict:
        ...
    
    @property
    def network_intrinsics(self) -> Optional[NetworkIntrinsics]:
        ...
    
    def convert_inference_coords(self, coords: tuple, metadata: dict, picam2: Picamera2, stream=...) -> tuple:
        """Convert relative inference coordinates into the output image coordinates space."""
        ...
    
    def get_device_id(self) -> str:
        """Get IMX500 Device ID"""
        ...
    
    def get_fw_upload_progress(self, stage_req) -> tuple:
        """Returns the current progress of the fw upload in the form of (current, total)."""
        ...
    
    def show_network_fw_progress_bar(self) -> None:
        ...
    
    def get_roi_scaled(self, request: CompletedRequest, stream=...) -> tuple:
        """Get the region of interest (ROI) in output image coordinates space."""
        ...
    
    @staticmethod
    def get_isp_output_size(picam2, stream=...) -> tuple:
        ...
    
    def get_input_size(self) -> tuple:
        """Get the model input tensor size as (width, height)."""
        ...
    
    def input_tensor_image(self, input_tensor) -> NDArray[np.unsignedinteger[_8Bit]]:
        """Convert input tensor in planar format to interleaved RGB."""
        ...
    
    def get_outputs(self, metadata: dict, add_batch=...) -> Optional[list[np.ndarray]]:
        """Get the model outputs."""
        ...
    
    def get_output_shapes(self, metadata: dict) -> list[tuple[int]]:
        """Get the model output shapes if no output return empty list."""
        ...
    
    def set_inference_roi_abs(self, roi: tuple) -> None:
        """
        Set the absolute inference image crop.

        Specify an absolute region of interest in the form a (left, top, width, height) crop for the input inference
        image. The co-ordinates are based on the full sensor resolution.
        """
        ...
    
    def set_inference_aspect_ratio(self, aspect_ratio: tuple) -> None:
        """
        Set the aspect ratio of the inference image.

        Specify a pixel aspect ratio needed for the input inference image relative to the full sensor resolution.
        This simply calculates an ROI based on a centre crop and calls set_inference_roi_abs().
        """
        ...
    
    def set_auto_aspect_ratio(self) -> None:
        """Set the inference image crop to presereve the input tensor aspect ratio."""
        ...
    
    @staticmethod
    def get_kpi_info(metadata: dict) -> Optional[tuple[float, float]]:
        """Return the KPI parameters in the form (dnn_runtime, dsp_runtime) in milliseconds."""
        ...
    


