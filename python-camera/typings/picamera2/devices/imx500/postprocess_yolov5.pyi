"""
This type stub file was generated by pyright.
"""

import numpy as np
from typing import List, Any

from numpy._typing import NDArray

"""
Yolov5 postprocessing

This code is based on:
https://github.com/ultralytics/ultralytics
"""
default_anchors = ...
default_strides = ...
def postprocess_yolov5_detection(outputs: List[np.ndarray], model_input_shape=..., num_categories=..., min_wh=..., max_wh=..., conf_thres: float = ..., iou_thres: float = ..., max_nms_dets: int = ..., max_out_dets: int = ...) -> tuple[Any, Any, Any]:
    ...

def box_decoding_yolov5n(tensors, num_categories=..., H=..., W=..., anchors=..., strides=...) -> NDArray[Any]:
    ...

def scale_boxes(boxes: np.ndarray, h_image: int, w_image: int, h_model: int, w_model: int, preserve_aspect_ratio: bool) -> np.ndarray:
    """
    Scale and offset bounding boxes based on model output size and original image size.

    Args:
        boxes (numpy.ndarray): Array of bounding boxes in format [y_min, x_min, y_max, x_max].
        h_image (int): Original image height.
        w_image (int): Original image width.
        h_model (int): Model output height.
        w_model (int): Model output width.
        preserve_aspect_ratio (bool): Whether to preserve image aspect ratio during scaling

    Returns:
        numpy.ndarray: Scaled and offset bounding boxes.
    """
    ...

def clip_boxes(boxes: np.ndarray, h: int, w: int) -> np.ndarray:
    """
    Clip bounding boxes to stay within the image boundaries.

    Args:
        boxes (numpy.ndarray): Array of bounding boxes in format [y_min, x_min, y_max, x_max].
        h (int): Height of the image.
        w (int): Width of the image.

    Returns:
        numpy.ndarray: Clipped bounding boxes.
    """
    ...

def apply_normalization(boxes, orig_width, orig_height, boxes_format):
    ...

def coco80_to_coco91(x) -> np.ndarray[Any, np.dtype[Any]]:
    ...

def yolov5n_preprocess(img) -> NDArray[np.floating[Any]]:
    ...

