from typing import ClassVar, Iterator, overload

class Camera:
    def __init__(self, *args, **kwargs) -> None: ...
    def acquire(self) -> None: ...
    def configure(self, arg0: CameraConfiguration) -> None: ...
    def create_request(self, cookie: int = ...) -> Request: ...
    def generate_configuration(self, arg0: list[StreamRole]) -> CameraConfiguration: ...
    def queue_request(self, arg0: Request) -> None: ...
    def release(self) -> None: ...
    def start(self, controls: dict[ControlId, object] = ...) -> None: ...
    def stop(self) -> None: ...
    @property
    def controls(self) -> dict[ControlId, ControlInfo]: ...
    @property
    def id(self) -> str: ...
    @property
    def properties(self) -> dict[ControlId, object]: ...
    @property
    def streams(self) -> set: ...

class CameraConfiguration:
    class Status:
        __members__: ClassVar[dict] = ...  # read-only
        Adjusted: ClassVar[CameraConfiguration.Status] = ...
        Invalid: ClassVar[CameraConfiguration.Status] = ...
        Valid: ClassVar[CameraConfiguration.Status] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    orientation: Orientation
    sensor_config: SensorConfiguration | None
    def __init__(self, *args, **kwargs) -> None: ...
    def at(self, arg0: int) -> StreamConfiguration: ...
    def validate(self) -> CameraConfiguration.Status: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    @property
    def empty(self) -> bool: ...
    @property
    def size(self) -> int: ...

class CameraManager:
    version: ClassVar[str] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...
    def get(self, arg0: str) -> Camera: ...
    def get_ready_requests(self) -> list[object]: ...
    @staticmethod
    def singleton() -> CameraManager: ...
    @property
    def cameras(self) -> list: ...
    @property
    def event_fd(self) -> int: ...

class ColorSpace:
    class Primaries:
        __members__: ClassVar[dict] = ...  # read-only
        Raw: ClassVar[ColorSpace.Primaries] = ...
        Rec2020: ClassVar[ColorSpace.Primaries] = ...
        Rec709: ClassVar[ColorSpace.Primaries] = ...
        Smpte170m: ClassVar[ColorSpace.Primaries] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class Range:
        __members__: ClassVar[dict] = ...  # read-only
        Full: ClassVar[ColorSpace.Range] = ...
        Limited: ClassVar[ColorSpace.Range] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class TransferFunction:
        __members__: ClassVar[dict] = ...  # read-only
        Linear: ClassVar[ColorSpace.TransferFunction] = ...
        Rec709: ClassVar[ColorSpace.TransferFunction] = ...
        Srgb: ClassVar[ColorSpace.TransferFunction] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class YcbcrEncoding:
        __members__: ClassVar[dict] = ...  # read-only
        Null: ClassVar[ColorSpace.YcbcrEncoding] = ...
        Rec2020: ClassVar[ColorSpace.YcbcrEncoding] = ...
        Rec601: ClassVar[ColorSpace.YcbcrEncoding] = ...
        Rec709: ClassVar[ColorSpace.YcbcrEncoding] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    primaries: ColorSpace.Primaries
    range: ColorSpace.Range
    transferFunction: ColorSpace.TransferFunction
    ycbcrEncoding: ColorSpace.YcbcrEncoding
    @overload
    def __init__(self, primaries: ColorSpace.Primaries, transferFunction: ColorSpace.TransferFunction, ycbcrEncoding: ColorSpace.YcbcrEncoding, range: ColorSpace.Range) -> None: ...
    @overload
    def __init__(self, arg0: ColorSpace) -> None: ...
    @staticmethod
    def Raw() -> ColorSpace: ...
    @staticmethod
    def Rec2020() -> ColorSpace: ...
    @staticmethod
    def Rec709() -> ColorSpace: ...
    @staticmethod
    def Smpte170m() -> ColorSpace: ...
    @staticmethod
    def Srgb() -> ColorSpace: ...
    @staticmethod
    def Sycc() -> ColorSpace: ...

class ControlId:
    def __init__(self, *args, **kwargs) -> None: ...
    def enumerators(self) -> dict[int, str]: ...
    @property
    def id(self) -> int: ...
    @property
    def isArray(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def type(self) -> ControlType: ...
    @property
    def vendor(self) -> str: ...

class ControlInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def default(self) -> object: ...
    @property
    def max(self) -> object: ...
    @property
    def min(self) -> object: ...
    @property
    def values(self) -> list: ...

class ControlType:
    __members__: ClassVar[dict] = ...  # read-only
    Bool: ClassVar[ControlType] = ...
    Byte: ClassVar[ControlType] = ...
    Float: ClassVar[ControlType] = ...
    Integer32: ClassVar[ControlType] = ...
    Integer64: ClassVar[ControlType] = ...
    Null: ClassVar[ControlType] = ...
    Point: ClassVar[ControlType] = ...
    Rectangle: ClassVar[ControlType] = ...
    Size: ClassVar[ControlType] = ...
    String: ClassVar[ControlType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class FrameBuffer:
    class Plane:
        fd: int
        length: int
        offset: int
        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, fd: int, offset: int, length: int) -> None: ...
    cookie: int
    def __init__(self, planes: list[FrameBuffer.Plane], cookie: int = ...) -> None: ...
    @property
    def metadata(self) -> FrameMetadata: ...
    @property
    def planes(self) -> list[FrameBuffer.Plane]: ...

class FrameBufferAllocator:
    def __init__(self, arg0: Camera) -> None: ...
    def allocate(self, arg0: Stream) -> int: ...
    def buffers(self, arg0: Stream) -> list: ...
    @property
    def allocated(self) -> bool: ...

class FrameMetadata:
    class Plane:
        bytes_used: int
        def __init__(self, *args, **kwargs) -> None: ...

    class Status:
        __members__: ClassVar[dict] = ...  # read-only
        Cancelled: ClassVar[FrameMetadata.Status] = ...
        Error: ClassVar[FrameMetadata.Status] = ...
        Success: ClassVar[FrameMetadata.Status] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def planes(self) -> list[FrameMetadata.Plane]: ...
    @property
    def sequence(self) -> int: ...
    @property
    def status(self) -> FrameMetadata.Status: ...
    @property
    def timestamp(self) -> int: ...

class Orientation:
    __members__: ClassVar[dict] = ...  # read-only
    Rotate0: ClassVar[Orientation] = ...
    Rotate0Mirror: ClassVar[Orientation] = ...
    Rotate180: ClassVar[Orientation] = ...
    Rotate180Mirror: ClassVar[Orientation] = ...
    Rotate270: ClassVar[Orientation] = ...
    Rotate270Mirror: ClassVar[Orientation] = ...
    Rotate90: ClassVar[Orientation] = ...
    Rotate90Mirror: ClassVar[Orientation] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class PixelFormat:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    def __eq__(self, arg0: PixelFormat) -> bool: ...
    @property
    def fourcc(self) -> int: ...
    @property
    def modifier(self) -> int: ...

class Point:
    x: int
    y: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def __eq__(self, arg0: Point) -> bool: ...
    def __neg__(self) -> Point: ...

class Rectangle:
    height: int
    width: int
    x: int
    y: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: Size) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg0: Size) -> None: ...
    def bounded_to(self, arg0: Rectangle) -> Rectangle: ...
    def enclosed_in(self, arg0: Rectangle) -> Rectangle: ...
    def scale_by(self, arg0: Size, arg1: Size) -> Rectangle: ...
    def scaled_by(self, arg0: Size, arg1: Size) -> Rectangle: ...
    def translate_by(self, arg0: Point) -> Rectangle: ...
    def translated_by(self, arg0: Point) -> Rectangle: ...
    def __eq__(self, arg0: Rectangle) -> bool: ...
    @property
    def center(self) -> Point: ...
    @property
    def is_null(self) -> bool: ...
    @property
    def size(self) -> Size: ...
    @property
    def topLeft(self) -> Point: ...

class Request:
    class Reuse:
        __members__: ClassVar[dict] = ...  # read-only
        Default: ClassVar[Request.Reuse] = ...
        ReuseBuffers: ClassVar[Request.Reuse] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class Status:
        __members__: ClassVar[dict] = ...  # read-only
        Cancelled: ClassVar[Request.Status] = ...
        Complete: ClassVar[Request.Status] = ...
        Pending: ClassVar[Request.Status] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add_buffer(self, arg0: Stream, arg1: FrameBuffer) -> None: ...
    def reuse(self) -> None: ...
    def set_control(self, arg0: ControlId, arg1: object) -> None: ...
    @property
    def buffers(self) -> dict[Stream, FrameBuffer]: ...
    @property
    def cookie(self) -> int: ...
    @property
    def has_pending_buffers(self) -> bool: ...
    @property
    def metadata(self) -> dict[ControlId, object]: ...
    @property
    def sequence(self) -> int: ...
    @property
    def status(self) -> Request.Status: ...

class SensorConfiguration:
    analog_crop: Rectangle
    binning: tuple
    bit_depth: int
    output_size: Size
    skipping: tuple
    def __init__(self) -> None: ...
    def is_valid(self) -> bool: ...

class Size:
    height: int
    width: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int) -> None: ...
    def align_down_to(self, arg0: int, arg1: int) -> Size: ...
    def align_up_to(self, arg0: int, arg1: int) -> Size: ...
    @overload
    def aligned_up_to(self, arg0: int, arg1: int) -> Size: ...
    @overload
    def aligned_up_to(self, arg0: int, arg1: int) -> Size: ...
    def bound_to(self, arg0: Size) -> Size: ...
    def bounded_to(self, arg0: Size) -> Size: ...
    def bounded_to_aspect_ratio(self, arg0: Size) -> Size: ...
    def centered_to(self, arg0: Point) -> Rectangle: ...
    def expand_to(self, arg0: Size) -> Size: ...
    def expanded_to(self, arg0: Size) -> Size: ...
    def expanded_to_aspect_ratio(self, arg0: Size) -> Size: ...
    def grow_by(self, arg0: Size) -> Size: ...
    def grown_by(self, arg0: Size) -> Size: ...
    def shrink_by(self, arg0: Size) -> Size: ...
    def shrunk_by(self, arg0: Size) -> Size: ...
    def __eq__(self, arg0: Size) -> bool: ...
    def __imul__(self, arg0: float) -> Size: ...
    def __itruediv__(self, arg0: float) -> Size: ...
    def __le__(self, arg0: Size) -> bool: ...
    def __lt__(self, arg0: Size) -> bool: ...
    def __mul__(self, arg0: float) -> Size: ...
    def __truediv__(self, arg0: float) -> Size: ...
    @property
    def is_null(self) -> bool: ...

class SizeRange:
    hStep: int
    max: Size
    min: Size
    vStep: int
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Size) -> None: ...
    @overload
    def __init__(self, arg0: Size, arg1: Size) -> None: ...
    @overload
    def __init__(self, arg0: Size, arg1: Size, arg2: int, arg3: int) -> None: ...
    def contains(self, arg0: Size) -> bool: ...
    def __eq__(self, arg0: SizeRange) -> bool: ...

class Stream:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def configuration(self) -> StreamConfiguration: ...

class StreamConfiguration:
    buffer_count: int
    color_space: ColorSpace | None
    frame_size: int
    pixel_format: PixelFormat
    size: Size
    stride: int
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def formats(self) -> StreamFormats: ...
    @property
    def stream(self) -> Stream: ...

class StreamFormats:
    def __init__(self, *args, **kwargs) -> None: ...
    def range(self, arg0: PixelFormat) -> SizeRange: ...
    def sizes(self, arg0: PixelFormat) -> list[Size]: ...
    @property
    def pixel_formats(self) -> list[PixelFormat]: ...

class StreamRole:
    __members__: ClassVar[dict] = ...  # read-only
    Raw: ClassVar[StreamRole] = ...
    StillCapture: ClassVar[StreamRole] = ...
    VideoRecording: ClassVar[StreamRole] = ...
    Viewfinder: ClassVar[StreamRole] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Transform:
    hflip: bool
    transpose: bool
    vflip: bool
    @overload
    def __init__(self, rotation: int = ..., hflip: bool = ..., vflip: bool = ..., transpose: bool = ...) -> None: ...
    @overload
    def __init__(self, arg0: Transform) -> None: ...
    def compose(self, arg0: Transform) -> None: ...
    def inverse(self) -> Transform: ...
    def invert(self) -> None: ...

class controls:
    class AeConstraintModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Custom: ClassVar[controls.AeConstraintModeEnum] = ...
        Highlight: ClassVar[controls.AeConstraintModeEnum] = ...
        Normal: ClassVar[controls.AeConstraintModeEnum] = ...
        Shadows: ClassVar[controls.AeConstraintModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AeExposureModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Custom: ClassVar[controls.AeExposureModeEnum] = ...
        Long: ClassVar[controls.AeExposureModeEnum] = ...
        Normal: ClassVar[controls.AeExposureModeEnum] = ...
        Short: ClassVar[controls.AeExposureModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AeFlickerModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Auto: ClassVar[controls.AeFlickerModeEnum] = ...
        Manual: ClassVar[controls.AeFlickerModeEnum] = ...
        Off: ClassVar[controls.AeFlickerModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AeMeteringModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        CentreWeighted: ClassVar[controls.AeMeteringModeEnum] = ...
        Custom: ClassVar[controls.AeMeteringModeEnum] = ...
        Matrix: ClassVar[controls.AeMeteringModeEnum] = ...
        Spot: ClassVar[controls.AeMeteringModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AeStateEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Converged: ClassVar[controls.AeStateEnum] = ...
        Idle: ClassVar[controls.AeStateEnum] = ...
        Searching: ClassVar[controls.AeStateEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfMeteringEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Auto: ClassVar[controls.AfMeteringEnum] = ...
        Windows: ClassVar[controls.AfMeteringEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Auto: ClassVar[controls.AfModeEnum] = ...
        Continuous: ClassVar[controls.AfModeEnum] = ...
        Manual: ClassVar[controls.AfModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfPauseEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Deferred: ClassVar[controls.AfPauseEnum] = ...
        Immediate: ClassVar[controls.AfPauseEnum] = ...
        Resume: ClassVar[controls.AfPauseEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfPauseStateEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Paused: ClassVar[controls.AfPauseStateEnum] = ...
        Pausing: ClassVar[controls.AfPauseStateEnum] = ...
        Running: ClassVar[controls.AfPauseStateEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfRangeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Full: ClassVar[controls.AfRangeEnum] = ...
        Macro: ClassVar[controls.AfRangeEnum] = ...
        Normal: ClassVar[controls.AfRangeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfSpeedEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Fast: ClassVar[controls.AfSpeedEnum] = ...
        Normal: ClassVar[controls.AfSpeedEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfStateEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Failed: ClassVar[controls.AfStateEnum] = ...
        Focused: ClassVar[controls.AfStateEnum] = ...
        Idle: ClassVar[controls.AfStateEnum] = ...
        Scanning: ClassVar[controls.AfStateEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AfTriggerEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Cancel: ClassVar[controls.AfTriggerEnum] = ...
        Start: ClassVar[controls.AfTriggerEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AnalogueGainModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Auto: ClassVar[controls.AnalogueGainModeEnum] = ...
        Manual: ClassVar[controls.AnalogueGainModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class AwbModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Auto: ClassVar[controls.AwbModeEnum] = ...
        Cloudy: ClassVar[controls.AwbModeEnum] = ...
        Custom: ClassVar[controls.AwbModeEnum] = ...
        Daylight: ClassVar[controls.AwbModeEnum] = ...
        Fluorescent: ClassVar[controls.AwbModeEnum] = ...
        Incandescent: ClassVar[controls.AwbModeEnum] = ...
        Indoor: ClassVar[controls.AwbModeEnum] = ...
        Tungsten: ClassVar[controls.AwbModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class ExposureTimeModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Auto: ClassVar[controls.ExposureTimeModeEnum] = ...
        Manual: ClassVar[controls.ExposureTimeModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class HdrChannelEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Long: ClassVar[controls.HdrChannelEnum] = ...
        Medium: ClassVar[controls.HdrChannelEnum] = ...
        Short: ClassVar[controls.HdrChannelEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class HdrModeEnum:
        __members__: ClassVar[dict] = ...  # read-only
        MultiExposure: ClassVar[controls.HdrModeEnum] = ...
        MultiExposureUnmerged: ClassVar[controls.HdrModeEnum] = ...
        Night: ClassVar[controls.HdrModeEnum] = ...
        Off: ClassVar[controls.HdrModeEnum] = ...
        SingleExposure: ClassVar[controls.HdrModeEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class debug:
        def __init__(self, *args, **kwargs) -> None: ...

    class draft:
        class AePrecaptureTriggerEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Cancel: ClassVar[controls.draft.AePrecaptureTriggerEnum] = ...
            Idle: ClassVar[controls.draft.AePrecaptureTriggerEnum] = ...
            Start: ClassVar[controls.draft.AePrecaptureTriggerEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...

        class AwbStateEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Converged: ClassVar[controls.draft.AwbStateEnum] = ...
            Locked: ClassVar[controls.draft.AwbStateEnum] = ...
            StateInactive: ClassVar[controls.draft.AwbStateEnum] = ...
            StateSearching: ClassVar[controls.draft.AwbStateEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...

        class ColorCorrectionAberrationModeEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Fast: ClassVar[controls.draft.ColorCorrectionAberrationModeEnum] = ...
            HighQuality: ClassVar[controls.draft.ColorCorrectionAberrationModeEnum] = ...
            Off: ClassVar[controls.draft.ColorCorrectionAberrationModeEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...

        class FaceDetectModeEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Full: ClassVar[controls.draft.FaceDetectModeEnum] = ...
            Off: ClassVar[controls.draft.FaceDetectModeEnum] = ...
            Simple: ClassVar[controls.draft.FaceDetectModeEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...

        class LensShadingMapModeEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Off: ClassVar[controls.draft.LensShadingMapModeEnum] = ...
            On: ClassVar[controls.draft.LensShadingMapModeEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...

        class NoiseReductionModeEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Fast: ClassVar[controls.draft.NoiseReductionModeEnum] = ...
            HighQuality: ClassVar[controls.draft.NoiseReductionModeEnum] = ...
            Minimal: ClassVar[controls.draft.NoiseReductionModeEnum] = ...
            Off: ClassVar[controls.draft.NoiseReductionModeEnum] = ...
            ZSL: ClassVar[controls.draft.NoiseReductionModeEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...

        class TestPatternModeEnum:
            __members__: ClassVar[dict] = ...  # read-only
            ColorBars: ClassVar[controls.draft.TestPatternModeEnum] = ...
            ColorBarsFadeToGray: ClassVar[controls.draft.TestPatternModeEnum] = ...
            Custom1: ClassVar[controls.draft.TestPatternModeEnum] = ...
            Off: ClassVar[controls.draft.TestPatternModeEnum] = ...
            Pn9: ClassVar[controls.draft.TestPatternModeEnum] = ...
            SolidColor: ClassVar[controls.draft.TestPatternModeEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...
        AePrecaptureTrigger: ClassVar[ControlId] = ...  # read-only
        AwbState: ClassVar[ControlId] = ...  # read-only
        ColorCorrectionAberrationMode: ClassVar[ControlId] = ...  # read-only
        FaceDetectFaceIds: ClassVar[ControlId] = ...  # read-only
        FaceDetectFaceLandmarks: ClassVar[ControlId] = ...  # read-only
        FaceDetectFaceRectangles: ClassVar[ControlId] = ...  # read-only
        FaceDetectFaceScores: ClassVar[ControlId] = ...  # read-only
        FaceDetectMode: ClassVar[ControlId] = ...  # read-only
        LensShadingMapMode: ClassVar[ControlId] = ...  # read-only
        MaxLatency: ClassVar[ControlId] = ...  # read-only
        NoiseReductionMode: ClassVar[ControlId] = ...  # read-only
        PipelineDepth: ClassVar[ControlId] = ...  # read-only
        SensorRollingShutterSkew: ClassVar[ControlId] = ...  # read-only
        TestPatternMode: ClassVar[ControlId] = ...  # read-only
        def __init__(self, *args, **kwargs) -> None: ...

    class rpi:
        class SyncModeEnum:
            __members__: ClassVar[dict] = ...  # read-only
            Client: ClassVar[controls.rpi.SyncModeEnum] = ...
            Off: ClassVar[controls.rpi.SyncModeEnum] = ...
            Server: ClassVar[controls.rpi.SyncModeEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...
        Bcm2835StatsOutput: ClassVar[ControlId] = ...  # read-only
        CnnEnableInputTensor: ClassVar[ControlId] = ...  # read-only
        CnnInputTensor: ClassVar[ControlId] = ...  # read-only
        CnnInputTensorInfo: ClassVar[ControlId] = ...  # read-only
        CnnKpiInfo: ClassVar[ControlId] = ...  # read-only
        CnnOutputTensor: ClassVar[ControlId] = ...  # read-only
        CnnOutputTensorInfo: ClassVar[ControlId] = ...  # read-only
        PispStatsOutput: ClassVar[ControlId] = ...  # read-only
        ScalerCrops: ClassVar[ControlId] = ...  # read-only
        StatsOutputEnable: ClassVar[ControlId] = ...  # read-only
        SyncFrames: ClassVar[ControlId] = ...  # read-only
        SyncMode: ClassVar[ControlId] = ...  # read-only
        SyncReady: ClassVar[ControlId] = ...  # read-only
        SyncTimer: ClassVar[ControlId] = ...  # read-only
        def __init__(self, *args, **kwargs) -> None: ...
    AeConstraintMode: ClassVar[ControlId] = ...  # read-only
    AeEnable: ClassVar[ControlId] = ...  # read-only
    AeExposureMode: ClassVar[ControlId] = ...  # read-only
    AeFlickerDetected: ClassVar[ControlId] = ...  # read-only
    AeFlickerMode: ClassVar[ControlId] = ...  # read-only
    AeFlickerPeriod: ClassVar[ControlId] = ...  # read-only
    AeMeteringMode: ClassVar[ControlId] = ...  # read-only
    AeState: ClassVar[ControlId] = ...  # read-only
    AfMetering: ClassVar[ControlId] = ...  # read-only
    AfMode: ClassVar[ControlId] = ...  # read-only
    AfPause: ClassVar[ControlId] = ...  # read-only
    AfPauseState: ClassVar[ControlId] = ...  # read-only
    AfRange: ClassVar[ControlId] = ...  # read-only
    AfSpeed: ClassVar[ControlId] = ...  # read-only
    AfState: ClassVar[ControlId] = ...  # read-only
    AfTrigger: ClassVar[ControlId] = ...  # read-only
    AfWindows: ClassVar[ControlId] = ...  # read-only
    AnalogueGain: ClassVar[ControlId] = ...  # read-only
    AnalogueGainMode: ClassVar[ControlId] = ...  # read-only
    AwbEnable: ClassVar[ControlId] = ...  # read-only
    AwbLocked: ClassVar[ControlId] = ...  # read-only
    AwbMode: ClassVar[ControlId] = ...  # read-only
    Brightness: ClassVar[ControlId] = ...  # read-only
    ColourCorrectionMatrix: ClassVar[ControlId] = ...  # read-only
    ColourGains: ClassVar[ControlId] = ...  # read-only
    ColourTemperature: ClassVar[ControlId] = ...  # read-only
    Contrast: ClassVar[ControlId] = ...  # read-only
    DebugMetadataEnable: ClassVar[ControlId] = ...  # read-only
    DigitalGain: ClassVar[ControlId] = ...  # read-only
    ExposureTime: ClassVar[ControlId] = ...  # read-only
    ExposureTimeMode: ClassVar[ControlId] = ...  # read-only
    ExposureValue: ClassVar[ControlId] = ...  # read-only
    FocusFoM: ClassVar[ControlId] = ...  # read-only
    FrameDuration: ClassVar[ControlId] = ...  # read-only
    FrameDurationLimits: ClassVar[ControlId] = ...  # read-only
    FrameWallClock: ClassVar[ControlId] = ...  # read-only
    Gamma: ClassVar[ControlId] = ...  # read-only
    HdrChannel: ClassVar[ControlId] = ...  # read-only
    HdrMode: ClassVar[ControlId] = ...  # read-only
    LensPosition: ClassVar[ControlId] = ...  # read-only
    Lux: ClassVar[ControlId] = ...  # read-only
    Saturation: ClassVar[ControlId] = ...  # read-only
    ScalerCrop: ClassVar[ControlId] = ...  # read-only
    SensorBlackLevels: ClassVar[ControlId] = ...  # read-only
    SensorTemperature: ClassVar[ControlId] = ...  # read-only
    SensorTimestamp: ClassVar[ControlId] = ...  # read-only
    Sharpness: ClassVar[ControlId] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class formats:
    ABGR8888: ClassVar[PixelFormat] = ...  # read-only
    ARGB8888: ClassVar[PixelFormat] = ...  # read-only
    AVUY8888: ClassVar[PixelFormat] = ...  # read-only
    BGGR_PISP_COMP1: ClassVar[PixelFormat] = ...  # read-only
    BGR161616: ClassVar[PixelFormat] = ...  # read-only
    BGR888: ClassVar[PixelFormat] = ...  # read-only
    BGRA8888: ClassVar[PixelFormat] = ...  # read-only
    BGRX8888: ClassVar[PixelFormat] = ...  # read-only
    GBRG_PISP_COMP1: ClassVar[PixelFormat] = ...  # read-only
    GRBG_PISP_COMP1: ClassVar[PixelFormat] = ...  # read-only
    MJPEG: ClassVar[PixelFormat] = ...  # read-only
    MONO_PISP_COMP1: ClassVar[PixelFormat] = ...  # read-only
    NV12: ClassVar[PixelFormat] = ...  # read-only
    NV16: ClassVar[PixelFormat] = ...  # read-only
    NV21: ClassVar[PixelFormat] = ...  # read-only
    NV24: ClassVar[PixelFormat] = ...  # read-only
    NV42: ClassVar[PixelFormat] = ...  # read-only
    NV61: ClassVar[PixelFormat] = ...  # read-only
    R10: ClassVar[PixelFormat] = ...  # read-only
    R10_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    R12: ClassVar[PixelFormat] = ...  # read-only
    R12_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    R16: ClassVar[PixelFormat] = ...  # read-only
    R8: ClassVar[PixelFormat] = ...  # read-only
    RGB161616: ClassVar[PixelFormat] = ...  # read-only
    RGB565: ClassVar[PixelFormat] = ...  # read-only
    RGB565_BE: ClassVar[PixelFormat] = ...  # read-only
    RGB888: ClassVar[PixelFormat] = ...  # read-only
    RGBA8888: ClassVar[PixelFormat] = ...  # read-only
    RGBX8888: ClassVar[PixelFormat] = ...  # read-only
    RGGB_PISP_COMP1: ClassVar[PixelFormat] = ...  # read-only
    SBGGR10: ClassVar[PixelFormat] = ...  # read-only
    SBGGR10_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SBGGR10_IPU3: ClassVar[PixelFormat] = ...  # read-only
    SBGGR12: ClassVar[PixelFormat] = ...  # read-only
    SBGGR12_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SBGGR14: ClassVar[PixelFormat] = ...  # read-only
    SBGGR14_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SBGGR16: ClassVar[PixelFormat] = ...  # read-only
    SBGGR8: ClassVar[PixelFormat] = ...  # read-only
    SGBRG10: ClassVar[PixelFormat] = ...  # read-only
    SGBRG10_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SGBRG10_IPU3: ClassVar[PixelFormat] = ...  # read-only
    SGBRG12: ClassVar[PixelFormat] = ...  # read-only
    SGBRG12_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SGBRG14: ClassVar[PixelFormat] = ...  # read-only
    SGBRG14_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SGBRG16: ClassVar[PixelFormat] = ...  # read-only
    SGBRG8: ClassVar[PixelFormat] = ...  # read-only
    SGRBG10: ClassVar[PixelFormat] = ...  # read-only
    SGRBG10_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SGRBG10_IPU3: ClassVar[PixelFormat] = ...  # read-only
    SGRBG12: ClassVar[PixelFormat] = ...  # read-only
    SGRBG12_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SGRBG14: ClassVar[PixelFormat] = ...  # read-only
    SGRBG14_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SGRBG16: ClassVar[PixelFormat] = ...  # read-only
    SGRBG8: ClassVar[PixelFormat] = ...  # read-only
    SRGGB10: ClassVar[PixelFormat] = ...  # read-only
    SRGGB10_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SRGGB10_IPU3: ClassVar[PixelFormat] = ...  # read-only
    SRGGB12: ClassVar[PixelFormat] = ...  # read-only
    SRGGB12_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SRGGB14: ClassVar[PixelFormat] = ...  # read-only
    SRGGB14_CSI2P: ClassVar[PixelFormat] = ...  # read-only
    SRGGB16: ClassVar[PixelFormat] = ...  # read-only
    SRGGB8: ClassVar[PixelFormat] = ...  # read-only
    UYVY: ClassVar[PixelFormat] = ...  # read-only
    VYUY: ClassVar[PixelFormat] = ...  # read-only
    XBGR8888: ClassVar[PixelFormat] = ...  # read-only
    XRGB8888: ClassVar[PixelFormat] = ...  # read-only
    XVUY8888: ClassVar[PixelFormat] = ...  # read-only
    YUV420: ClassVar[PixelFormat] = ...  # read-only
    YUV422: ClassVar[PixelFormat] = ...  # read-only
    YUV444: ClassVar[PixelFormat] = ...  # read-only
    YUYV: ClassVar[PixelFormat] = ...  # read-only
    YVU420: ClassVar[PixelFormat] = ...  # read-only
    YVU422: ClassVar[PixelFormat] = ...  # read-only
    YVU444: ClassVar[PixelFormat] = ...  # read-only
    YVYU: ClassVar[PixelFormat] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class properties:
    class LocationEnum:
        __members__: ClassVar[dict] = ...  # read-only
        Back: ClassVar[properties.LocationEnum] = ...
        External: ClassVar[properties.LocationEnum] = ...
        Front: ClassVar[properties.LocationEnum] = ...
        __entries: ClassVar[dict] = ...
        def __init__(self, value: int) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __index__(self) -> int: ...
        def __int__(self) -> int: ...
        def __ne__(self, other: object) -> bool: ...
        @property
        def name(self) -> str: ...
        @property
        def value(self) -> int: ...

    class draft:
        class ColorFilterArrangementEnum:
            __members__: ClassVar[dict] = ...  # read-only
            BGGR: ClassVar[properties.draft.ColorFilterArrangementEnum] = ...
            GBRG: ClassVar[properties.draft.ColorFilterArrangementEnum] = ...
            GRBG: ClassVar[properties.draft.ColorFilterArrangementEnum] = ...
            MONO: ClassVar[properties.draft.ColorFilterArrangementEnum] = ...
            RGB: ClassVar[properties.draft.ColorFilterArrangementEnum] = ...
            RGGB: ClassVar[properties.draft.ColorFilterArrangementEnum] = ...
            __entries: ClassVar[dict] = ...
            def __init__(self, value: int) -> None: ...
            def __eq__(self, other: object) -> bool: ...
            def __hash__(self) -> int: ...
            def __index__(self) -> int: ...
            def __int__(self) -> int: ...
            def __ne__(self, other: object) -> bool: ...
            @property
            def name(self) -> str: ...
            @property
            def value(self) -> int: ...
        ColorFilterArrangement: ClassVar[ControlId] = ...  # read-only
        def __init__(self, *args, **kwargs) -> None: ...
    Location: ClassVar[ControlId] = ...  # read-only
    Model: ClassVar[ControlId] = ...  # read-only
    PixelArrayActiveAreas: ClassVar[ControlId] = ...  # read-only
    PixelArrayOpticalBlackRectangles: ClassVar[ControlId] = ...  # read-only
    PixelArraySize: ClassVar[ControlId] = ...  # read-only
    Rotation: ClassVar[ControlId] = ...  # read-only
    ScalerCropMaximum: ClassVar[ControlId] = ...  # read-only
    SensorSensitivity: ClassVar[ControlId] = ...  # read-only
    SystemDevices: ClassVar[ControlId] = ...  # read-only
    UnitCellSize: ClassVar[ControlId] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

def log_set_level(arg0: str, arg1: str) -> None: ...
